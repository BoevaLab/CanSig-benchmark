
_SINGATURES_OUT = cfg.ROOT / "signatures/{method}/{scenario}_{n_samples}_{random_seed}/{cluster}/{n_hvg}/{batch_key}/signatures.csv"
_SINGATURES_BENCHMARK = cfg.ROOT / "benchmarks/{scenario}_{n_samples}_{random_seed}/{method}/{cluster}/{n_hvg}/{batch_key}.txt"
_SINGATURES_LOG =  cfg.ROOT / "logs/meta_sigs/{scenario}_{n_samples}_{random_seed}/{method}/{cluster}/{n_hvg}/{batch_key}.txt"

ruleorder: get_signatures_latent > genenmf

def get_latent_path(wildcards):
    if wildcards.method.startswith("bbknn"):
        return f"{str(rules.integration_base.output).rsplit('.', 1)[0]}.npz"
    else:
        return f"{str(rules.integration_base.output).rsplit('.', 1)[0]}.csv"

rule get_signatures_r:
    input: expand(rules.cca_latent.output, ext="rds", allow_missing=True)
    output: _SINGATURES_OUT
    benchmark: _SINGATURES_BENCHMARK
    wildcard_constraints: 
        method="cca.*|rpca*"
    threads: 4
    resources:
        mem_mb= lambda x: 4048 * cfg.get_mem_scaling(x)
    container: "docker://fbarkmann/cansig:r"
    log: _SINGATURES_LOG
    conda: "CanSig-seurat"
    shell:
        """Rscript scripts/signatures/early_integration/get_signatures.R -i {input} -o {output} -n {wildcards.cluster} -r {wildcards.random_seed} &> {log}"""

rule get_signatures_latent:
    input:
        adata=rules.subsample.output,
        latent=get_latent_path
    output: _SINGATURES_OUT
    benchmark: _SINGATURES_BENCHMARK
    wildcard_constraints:
        method="scvi.*|harmony.*|unintegrated.*|mnc.*|ldvae.*|combat.*|dhaka.*|scanorama.*|bbknn.*"
    threads: 4
    container: "docker://fbarkmann/cansig:base"
    log: _SINGATURES_LOG
    resources:
        mem_mb= lambda x: 4048 * cfg.get_mem_scaling(x)
    shell: "python scripts/signatures/early_integration/get_signatures.py -i {input.adata} -l {input.latent} -o {output} -n {wildcards.cluster} -r {wildcards.random_seed} &> {log}"

rule genenmf_integration:
    input: rules.convert_h5ad_to_rds.output
    output: cfg.ROOT / "integration/{method}/{scenario}_{n_samples}_{random_seed}/{n_hvg}/{batch_key}/latent.rds"
    benchmark:
        cfg.ROOT /  "benchmarks/{scenario}_{n_samples}_{random_seed}/{n_hvg}/{batch_key}/{method}/integration.txt"
    threads: 4
    container: "docker://fbarkmann/cansig:r"
    wildcard_constraints: method="genenmf.*"
    resources:
        mem_mb= lambda x: 8096 * cfg.get_mem_scaling(x),
    log:
        cfg.ROOT / "logs/integration/{scenario}_{n_samples}_{random_seed}/{n_hvg}/{batch_key}/{method}/integration.txt"
    shell:
        """Rscript scripts/signatures/genenmf/get_tumour_programs.R -i {input} -o {output} -r {wildcards.random_seed} &> {log}"""

rule genenmf:
    input: rules.genenmf_integration.output
    output: _SINGATURES_OUT
    log: _SINGATURES_LOG
    threads: 4
    container: "docker://fbarkmann/cansig:r"
    wildcard_constraints: method="genenmf.*"
    resources:
        mem_mb= lambda x: 4048 * cfg.get_mem_scaling(x)
    benchmark: _SINGATURES_BENCHMARK
    shell:
        """Rscript scripts/signatures/genenmf/genenmf.R -i {input} -o {output} -n {wildcards.cluster} -r {wildcards.random_seed} &> {log}"""


rule scalop_integration:
    input: rules.convert_h5ad_to_rds.output
    output: cfg.ROOT / "integration/{method}/{scenario}_{n_samples}_{random_seed}/{n_hvg}/{batch_key}/latent.rds"
    benchmark:  cfg.ROOT /  "benchmarks/{scenario}_{n_samples}_{random_seed}/{n_hvg}/{batch_key}/{method}/integration.txt"
    threads: 4
    container: "docker://fbarkmann/cansig:r"
    wildcard_constraints:
        method="scalop.*"
    resources:
        mem_mb= lambda x: 8096 * cfg.get_mem_scaling(x)
    log:
        cfg.ROOT / "logs/integration/{scenario}_{n_samples}_{random_seed}/{n_hvg}/{batch_key}/{method}/integration.txt"
    shell:
        """Rscript scripts/signatures/scalop/get_tumour_programs.R -i {input} -o {output} -r {wildcards.random_seed} &> {log}"""

rule scalop:
    input: rules.scalop_integration.output
    output: _SINGATURES_OUT
    log: _SINGATURES_LOG
    threads: 4
    container: "docker://fbarkmann/cansig:r"
    wildcard_constraints:
        method="scalop.*"
    benchmark: _SINGATURES_BENCHMARK
    resources:
        mem_mb= lambda x: 4048 * cfg.get_mem_scaling(x)
    shell:
        """Rscript scripts/signatures/scalop/scalop.R -i {input} -o {output} -n {wildcards.cluster} -r {wildcards.random_seed} &> {log}"""