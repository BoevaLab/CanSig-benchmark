rule scalop_integration:
    input: rules.convert_h5ad_to_rds.output
    output: cfg.ROOT / "integration/scalop/{scenario}_{n_samples}_{random_seed}/tumour_program.rds"
    benchmark:
        cfg.ROOT /  "benchmarks/{scenario}_{n_samples}_{random_seed}/scalop/integration.txt"
    threads: 4
    container: "docker://fbarkmann/cansig:r"
    resources:
        slurm_partition="compute",
        mem_mb=8000,
        slurm_extra=""
    log:
        cfg.ROOT / "logs/integration/{scenario}_{n_samples}_{random_seed}/scalop/integration.txt"
    conda: "CanSig-R"
    shell:
        """Rscript scripts/metasigs/scalop/get_tumour_programs.R -i {input} -o {output} -r {wildcards.random_seed} &> {log}"""

rule scalop:
    input: rules.scalop_integration.output
    output: cfg.ROOT / "metasigs/scalop/{scenario}_{n_samples}_{random_seed}/{cluster}/metasigs.csv"
    log: cfg.ROOT / "logs/meta_sigs/{scenario}_{n_samples}_{random_seed}/scalop/{cluster}.txt"
    threads: 3
    container: "docker://fbarkmann/cansig:r"
    benchmark:
         cfg.ROOT / "benchmarks/{scenario}_{n_samples}_{random_seed}/scalop/{cluster}.txt"
    conda: "CanSig-R"
    shell:
        """Rscript scripts/metasigs/scalop/scalop.R -i {input} -o {output} -n {wildcards.cluster} -r {wildcards.random_seed} &> {log}"""